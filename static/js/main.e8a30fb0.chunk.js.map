{"version":3,"sources":["settings.js","apiFacade.jsx","components/Swapi.jsx","components/Login.jsx","components/Welcome.jsx","components/ShowRoles.jsx","App.js","index.js"],"names":["localURL","handleHttpErrors","res","ok","json","Promise","reject","status","fullError","returnVal","makeOptions","method","addToken","body","opts","headers","Accept","getToken","JSON","stringify","localStorage","getItem","login","user","pass","setRoles","options","username","password","fetch","URL","then","token","setItem","roles","logout","removeItem","fetchData","usertype","includes","fetchSwapi","ApiFacade","SwapiContent","useState","data","setData","useEffect","facade","catch","err","e","console","log","code","message","Swapi","loggedIn","to","LogIn","setUser","onChange","evt","target","id","value","onSubmit","preventDefault","placeholder","type","className","LoggedIn","dataFromServer","setDataFromServer","Welcome","rel","href","Show","prettyRoles","replace","toUpperCase","NoMatch","Header","exact","activeClassName","LogInScreen","permission","setLoggedIn","setMessage","ShowRoles","onClick","App","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e8a30fb0.chunk.js","sourcesContent":["//This file contains the URLs used in the application\r\n//Whenever you need an URL to access an endpoint, add it in here\r\n//and import this file whereever you need the URL\r\n\r\nexport const localURL = \"http://localhost:8080/securitystarter\";\r\nexport const onlineURL = \"??\";","//Change this before deployment (production)\r\nimport { localURL as URL} from \"./settings.js\";\r\nfunction handleHttpErrors(res) {\r\n  if (!res.ok) {\r\n    return Promise.reject({ status: res.status, fullError: res.json() });\r\n  }\r\n  return res.json();\r\n}\r\n\r\nconst ApiFacade = () => {\r\n  //Insert utility-methods from a latter step (d) here\r\n  function makeOptions(method, addToken, body) {\r\n    var opts = {\r\n      method: method,\r\n      headers: {\r\n        \"Content-type\": \"application/json\",\r\n        Accept: \"application/json\"\r\n      }\r\n    };\r\n    if (addToken && loggedIn()) {\r\n      opts.headers[\"x-access-token\"] = getToken();\r\n    }\r\n    if (body) {\r\n      opts.body = JSON.stringify(body);\r\n    }\r\n    return opts;\r\n  }\r\n\r\n  function setToken(token) {\r\n    localStorage.setItem(\"jwtToken\", token);\r\n  }\r\n\r\n  function getToken() {\r\n    return localStorage.getItem(\"jwtToken\");\r\n  }\r\n\r\n  function loggedIn() {\r\n    const loggedIn = getToken() != null;\r\n    return loggedIn;\r\n  }\r\n  \r\n  const fetchSwapi = () => {\r\n    //Remember to always include options from the makeOptions fucntion with >true< as the second parameter\r\n    //if you want to access a protected endpoint\r\n    const options = makeOptions(\"GET\",true); //True add's the token\r\n    return fetch(URL + \"/api/info/five\", options).then(handleHttpErrors);\r\n  }\r\n\r\n  //Roles is passed in as parameter from the LoggedIn component in App.js\r\n  const fetchData = (roles) => {\r\n    //In order to use the correct endpoints we have to check the roles of the user\r\n    let usertype = \"no role\";\r\n    //Currently we have three endpoints: \"user\", \"admin\" and \"both\"\r\n    //so we just check the roles array to see the roles of the logged in user\r\n    //Check line 54-55 in LoginEndpoint.java (backend)\r\n    if (roles.includes(\"user\") && roles.includes(\"admin\")) usertype = \"both\";\r\n    else if (roles.includes(\"user\")) usertype = \"user\";\r\n    else if (roles.includes(\"admin\")) usertype = \"admin\";\r\n    const options = makeOptions(\"GET\",true); //True add's the token\r\n    //The usertype is added to the URL to ensure the right endpoint is used\r\n    return fetch(URL + \"/api/info/\" + usertype, options).then(handleHttpErrors);\r\n  }\r\n\r\n  const login = (user, pass, setRoles) => {\r\n    const options = makeOptions(\"POST\", true, {\r\n      username: user,\r\n      password: pass\r\n    });\r\n    return fetch(URL + \"/api/login\", options)\r\n      .then(handleHttpErrors)\r\n      .then(res => {\r\n        setToken(res.token);\r\n        setRoles(res.roles);\r\n      });\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem(\"jwtToken\");\r\n  };\r\n\r\n  return {\r\n    login,\r\n    logout,\r\n    fetchData,\r\n    fetchSwapi\r\n  };\r\n};\r\n\r\nlet returnVal = ApiFacade();\r\nexport default returnVal;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport facade from \"../apiFacade\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Swapi = ({ loggedIn }) => {\r\n  return (\r\n    <>\r\n      {loggedIn ? <SwapiContent /> : <p>You are not logged in.</p>}\r\n\r\n      <Link to=\"#/\">Back</Link>\r\n    </>\r\n  );\r\n};\r\n\r\nconst SwapiContent = () => {\r\n  // MAKE CALL HERE TO APIFACADE HERE AND SHOW IT\r\n  const [data, setData] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    facade\r\n      .fetchSwapi()\r\n      .then(res => setData(res))\r\n      .catch(err => {\r\n        if (err.status) {\r\n          err.fullError.then(e => console.log(e.code, e.message));\r\n        } else {\r\n          console.log(\"Network error\");\r\n        }\r\n      });\r\n  }, []);\r\n  return (\r\n    <>\r\n      <p>Logged in and on Swapi</p>\r\n      <br></br>\r\n      <p>Data fetched from backend:</p>\r\n      <p>{JSON.stringify(data)}</p>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Swapi;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport facade from \"../apiFacade\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Swapi from \"./Swapi.jsx\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const LogIn = ({ login, message }) => {\r\n  const [user, setUser] = useState({ username: \"\", password: \"\" });\r\n\r\n  function log_in(evt) {\r\n    evt.preventDefault();\r\n    login(user.username, user.password);\r\n  }\r\n\r\n  const onChange = evt => {\r\n    setUser({ ...user, [evt.target.id]: evt.target.value });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Login</h2>\r\n      <form onSubmit={log_in}>\r\n        <input placeholder=\"User Name\" id=\"username\" onChange={onChange} />{\" \"}\r\n        <input\r\n          placeholder=\"Password\"\r\n          id=\"password\"\r\n          type=\"password\"\r\n          onChange={onChange}\r\n        />{\" \"}\r\n        <button className=\"btn btn-primary\">Login</button>\r\n        <br></br>\r\n        <p>{message}</p>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const LoggedIn = ({ roles }) => {\r\n  const [dataFromServer, setDataFromServer] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    function update() {\r\n      facade\r\n        .fetchData(roles)\r\n        .then(res => setDataFromServer(res))\r\n        .catch(err => {\r\n          if (err.status) {\r\n            err.fullError.then(e => console.log(e.code, e.message));\r\n          } else {\r\n            console.log(\"Network error\");\r\n          }\r\n        });\r\n    }\r\n    update();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <h2>Data Received from server</h2>\r\n      <p>{JSON.stringify(dataFromServer)}</p>\r\n      <Link to=\"#/swapi\">Swapi</Link>\r\n      <br></br>\r\n      <br></br>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../Welcome.css\";\r\n\r\nconst Welcome = () => {\r\n  return (\r\n    <>\r\n      <h1>Welcome Page</h1>\r\n      <h6>\r\n        <ins>After</ins> having set up the backend:\r\n      </h6>\r\n      <ol>\r\n        <li>\r\n          <code>npm install</code>\r\n        </li>\r\n        <li>\r\n          <code>npm start</code>\r\n        </li>\r\n      </ol>\r\n      <h6>Common issues:</h6>\r\n      <ul>\r\n        <li>\r\n          <code>npm audit fix --force</code>\r\n        </li>\r\n      </ul>\r\n      <h6>File overview</h6>\r\n      <label>\r\n        <i>src/components</i>\r\n      </label>\r\n      <br />\r\n      <ul className=\"border border-secondary customBorder\">\r\n        <li>\r\n          <code>Welcome.jsx</code> - Where you are\r\n        </li>\r\n        <li>\r\n          <code>Swapi.jsx</code> - Handles fetch call to the backend (Using\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://swapi.co/\">\r\n            {\" \"}\r\n            https://swapi.co/\r\n          </a>\r\n          )\r\n        </li>\r\n        <li>\r\n          <code>Login.jsx</code> - Handles login\r\n        </li>\r\n      </ul>\r\n      <br />\r\n      <label>\r\n        <i>src/</i>\r\n      </label>\r\n      <br />\r\n      <ul className=\"border border-secondary customBorder\">\r\n        <li>\r\n          <code>apiFacade.jsx</code> - Utility to help with fetching,\r\n          login/logout\r\n        </li>\r\n        <li>\r\n          <code>App.js</code> - Main component, handles routes &{\" \"}\r\n          <code>loggedIn</code>\r\n        </li>\r\n        <li>\r\n          <code>index.js</code> - Render component\r\n        </li>\r\n        <li>\r\n          <code>settings.js</code> - Holds global settings, such as fetch URLs\r\n        </li>\r\n\r\n        <span>\r\n          <i>CSS files</i>\r\n        </span>\r\n      </ul>\r\n      <p>\r\n        <Link to=\"#/login\">Login</Link> using the credentials you set in the\r\n        backend <code>utils\\SetupTestUsers.java</code>\r\n      </p>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Welcome;\r\n","import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nconst Show = ({ roles }) => {\r\n    let prettyRoles = roles;\r\n    prettyRoles = prettyRoles.replace(/\\[|\\]|\\\"/g, '').replace(',', ' & ').toUpperCase();\r\n\r\n    return (\r\n        <p>Permission: {prettyRoles}</p>\r\n    );\r\n};\r\n\r\nexport default Show;","import React, { useState, useEffect } from \"react\";\r\nimport facade from \"./apiFacade\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { LogIn, LoggedIn } from \"./components/Login.jsx\";\r\nimport WelcomePage from \"./components/Welcome.jsx\";\r\nimport {\r\n  HashRouter as Router,\r\n  Switch,\r\n  Route,\r\n  NavLink,\r\n  useParams,\r\n  useRouteMatch,\r\n  Link,\r\n  Prompt\r\n} from \"react-router-dom\";\r\nimport Swapi from \"./components/Swapi.jsx\";\r\nimport ShowRoles from \"./components/ShowRoles.jsx\";\r\n\r\nconst App = () => {\r\n  const [loggedIn, setLoggedIn] = useState(false);\r\n  return (\r\n    <>\r\n      <Router>\r\n        <Header loggedIn={loggedIn} />\r\n        <div className=\"container\">\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <WelcomePage />\r\n            </Route>\r\n            <Route path=\"/login\">\r\n              <LogInScreen permission={setLoggedIn} />\r\n            </Route>\r\n            <Route path=\"/swapi\">\r\n              <Swapi loggedIn={loggedIn} />\r\n            </Route>\r\n            <Route>\r\n              <NoMatch />\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    </>\r\n  );\r\n};\r\n\r\nconst NoMatch = () => (\r\n  <div>You're trying to access a resource that doesn't exist.</div>\r\n);\r\n\r\nconst Header = ({ loggedIn }) => {\r\n  return (\r\n    <ul className=\"header\">\r\n      <li>\r\n        <NavLink exact activeClassName=\"active\" to=\"#/\">\r\n          Home\r\n        </NavLink>\r\n      </li>\r\n      <li>\r\n        <NavLink activeClassName=\"active\" to=\"#/login\">\r\n          Login\r\n        </NavLink>\r\n      </li>\r\n      {loggedIn ? (\r\n        <li>\r\n          <NavLink activeClassName=\"active\" to=\"#/swapi\">\r\n            Star Wars API\r\n          </NavLink>\r\n        </li>\r\n      ) : null}\r\n    </ul>\r\n  );\r\n};\r\n\r\nconst LogInScreen = ({ permission }) => {\r\n  const [loggedIn, setLoggedIn] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [roles, setRoles] = useState([]);\r\n  const logout = () => {\r\n    facade.logout();\r\n    setLoggedIn(false);\r\n  };\r\n  const login = (user, pass) => {\r\n    facade\r\n      .login(user, pass, setRoles)\r\n      .then(res => {\r\n        setMessage(\"\");\r\n        setLoggedIn(true);\r\n      })\r\n      .catch(err => {\r\n        if (err.status) {\r\n          setMessage(\"Failed to log in, check your information\");\r\n          err.fullError.then(e => console.log(e.code, e.message));\r\n        } else {\r\n          console.log(\"Network error\");\r\n        }\r\n      });\r\n  };\r\n  // Lifts up the state of loggedIn so that we can make routes private.\r\n  useEffect(() => {\r\n    permission(loggedIn);\r\n  }, [loggedIn]);\r\n\r\n  return (\r\n    <div>\r\n      {!loggedIn ? (\r\n        <LogIn login={login} message={message} />\r\n      ) : (\r\n        <div>\r\n          <ShowRoles roles={roles} />\r\n          <LoggedIn roles={roles} />\r\n          <button className=\"btn btn-primary\" onClick={logout}>\r\n            {\" \"}\r\n            Logout{\" \"}\r\n          </button>\r\n        </div>\r\n      )}\r\n      <br></br>\r\n      <Link to=\"/\">Back to WelcomePage</Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}